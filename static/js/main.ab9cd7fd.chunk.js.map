{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","utils/error-utils.ts","api/auth-api.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistApi","get","title","post","todolistId","delete","put","taskId","model","handleServerAppError","data","dispatch","messages","setAppError","setAppStatus","handlerServerNetworkError","error","message","authAPI","initialState","isLoggedIn","setIsLoggedIn","value","type","status","isInitialized","setTasks","tasks","removeTask","changeTask","changeTaskEntityStatus","entityStatus","changeTaskTC","getState","a","allTasks","tasksOfCurrentTodolist","task","find","t","id","console","warn","apiModel","description","priority","startDate","deadline","res","resultCode","changeTodolistTitle","changeTodolistEntityStatus","clearTodosData","AddItemForm","React","memo","disabled","callBack","useState","setTitle","setError","onClickAddHandler","useCallback","trim","TextField","onChange","e","currentTarget","onKeyPress","key","variant","label","IconButton","onClick","color","ControlPoint","EditableSpan","edit","setEdit","newTitle","setNewTitle","editFalse","onFocus","event","select","onBlur","autoFocus","onDoubleClick","Task","taskEntityStatus","updateTask","useDispatch","onChangeHandler","newIsDoneValue","checked","Completed","New","className","Checkbox","Delete","Todolist","props","removeTodolistHandler","removeTodolistTC","changeFilter","filter","removeTaskHandler","removeTaskTC","addTaskHandler","item","addTaskTC","updateTaskHandler","taskID","changeTodolistTitleTC","tasksForTodolist","map","Button","TodolistsList","demo","todolists","useSelector","state","auth","useEffect","forEach","tl","items","addTodolistHandler","todolist","addTodolistTC","Grid","container","style","padding","spacing","Paper","to","Alert","ref","elevation","ErrorSnackbar","app","isOpen","handleClose","reason","Snackbar","open","autoHideDuration","onClose","anchorOrigin","horizontal","vertical","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","length","onSubmit","log","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","appStatus","AppBar","position","Toolbar","size","edge","mr","Menu","Typography","component","flexGrow","height","LinearProgress","Container","fixed","path","element","textAlign","top","CircularProgress","rootReducer","combineReducers","action","newTodolist","f","m","newState","todoListId","copyState","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.ab9cd7fd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\n\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    withCredentials: true,\n    headers: {\n        'API-KEY': '1e90b645-3ab8-4f0b-b1bb-01b70c47396d'\n    },\n})\n\nexport const todolistApi = {\n    getTodolists() {\n        return instance.get<Array<TodolistType>>('todo-lists')\n    },\n    addTodolist(title: string) {\n        return instance.post<CommonResponseType<{ item: TodolistType }>>('todo-lists', {title})\n    },\n    removeTodolist(todolistId: string) {\n        return instance.delete<CommonResponseType<{}>>(`todo-lists/${todolistId}`)\n    },\n    changeTodolistTitle(todolistId: string, title: string) {\n        return instance.put<CommonResponseType<{}>>(`todo-lists/${todolistId}`, {title})\n    },\n    getTasks(todolistId: string) {\n        return instance.get<GetTasksResponseType>(`todo-lists/${todolistId}/tasks`)\n    },\n    removeTask(todolistId: string, taskId: string) {\n        return instance.delete<CommonResponseType<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`)\n    },\n    addTask(todolistId: string, title: string) {\n        return instance.post<CommonResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks/`, {title})\n    },\n    changeTask(todolistId: string, taskId: string, model: ChangeTaskModelType) {\n        return instance.put<CommonResponseType<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\n    }\n}\n\n// Types\n\n\nexport type CommonResponseType<T> = {\n    resultCode: number\n    messages: Array<string>\n    fieldErrors: Array<string>\n    data: T\n}\n\nexport type TodolistType = {\n    id: string\n    title: string,\n    addedDate: string\n    order: number\n}\n\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3,\n}\n\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4,\n}\nexport type TaskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\n\nexport type ChangeTaskModelType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n}\n\ntype GetTasksResponseType = {\n    items: Array<TaskType>\n    totalCount: number\n    error: string\n}\n","import {setAppError, SetAppErrorType, setAppStatus, SetAppStatusType} from \"../app/app-reducer\";\nimport {CommonResponseType} from \"../api/todolist-api\";\nimport {Dispatch} from \"redux\";\n\nexport const handleServerAppError =\n    <T>(data: CommonResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\n        if (data.messages) {\n            dispatch(setAppError(data.messages[0]))\n        } else {\n            dispatch(setAppError('Some error occurred'))\n        }\n        dispatch(setAppStatus('failed'))\n    }\n\nexport const handlerServerNetworkError =\n    (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\n        dispatch(setAppError(error.message ? error.message : 'Some error occurred'))\n        dispatch(setAppStatus('failed'))\n}\n\ntype ErrorUtilsDispatchType = Dispatch<SetAppStatusType | SetAppErrorType>","import {CommonResponseType} from \"./todolist-api\";\nimport axios from 'axios'\n\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    withCredentials: true,\n    headers: {\n        'API-KEY': '1e90b645-3ab8-4f0b-b1bb-01b70c47396d'\n    },\n})\n\nexport const authAPI = {\n    autMe() {\n        return instance.get<CommonResponseType<AuthMeType>>(`auth/me`)\n    },\n    login(data: LoginPramsType) {\n        return instance.post<CommonResponseType<{ userId: number }>>(`auth/login/`, data)\n    },\n    logout() {\n        return instance.delete<CommonResponseType<{}>>(`auth/login`)\n    }\n}\ntype AuthMeType = {\n    id: number\n    email: string\n    login: string\n}\nexport type LoginPramsType = {\n    email: string\n    password: string\n    rememberMe?: boolean\n    captcha?: boolean\n}","import {SetAppErrorType, setAppStatus, SetAppStatusType} from \"../../app/app-reducer\";\nimport {ThunkType} from \"../../app/store\";\nimport {handlerServerNetworkError, handleServerAppError} from \"../../utils/error-utils\";\nimport {authAPI, LoginPramsType} from \"../../api/auth-api\";\nimport {clearTodosData} from \"../TodolistsList/todolists-reducer\";\n\nconst initialState = {\n    isLoggedIn: false as boolean\n}\ntype InitialStateType = typeof initialState\n\nexport const authReducer = (state: InitialStateType = initialState, action: AuthActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'LOGIN/SET-IS-LOGGED-IN':\n            return {...state, isLoggedIn: action.value}\n        default:\n            return state\n    }\n}\n\n\n// actions\nexport const setIsLoggedIn = (value: boolean) =>\n    ({type: 'LOGIN/SET-IS-LOGGED-IN', value} as const)\n\n// thunks\nexport const loginTC = (data: LoginPramsType): ThunkType => async dispatch => {\n    dispatch(setAppStatus('loading'))\n    try {\n        const res = await authAPI.login(data)\n        if (res.data.resultCode === 0) {\n            dispatch(setIsLoggedIn(true))\n            dispatch(setAppStatus('succeeded'))\n        } else {\n            handleServerAppError(res.data, dispatch)\n        }\n    } catch (e) {\n        handlerServerNetworkError((e as Error), dispatch)\n    }\n}\n\nexport const logoutTC = (): ThunkType => async dispatch => {\n    dispatch(setAppStatus('loading'))\n    try {\n        const res = await authAPI.logout()\n        if (res.data.resultCode === 0) {\n            dispatch(setIsLoggedIn(false))\n            dispatch(setAppStatus('succeeded'))\n            dispatch(clearTodosData())\n        } else {\n            handleServerAppError(res.data, dispatch)\n        }\n    } catch (e) {\n        handlerServerNetworkError((e as Error), dispatch)\n    }\n}\n\n// types\nexport type AuthActionsType = ReturnType<typeof setIsLoggedIn> | SetAppStatusType | SetAppErrorType","import {ThunkType} from \"./store\";\nimport {handlerServerNetworkError, handleServerAppError} from \"../utils/error-utils\";\nimport {setIsLoggedIn} from \"../features/Login/auth-reducer\";\nimport {authAPI} from \"../api/auth-api\";\n\nexport type AppStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\nexport type AppErrorType = string | null\n\nconst initialState = {\n    status: 'idle' as AppStatusType,\n    error: null as AppErrorType,\n    isInitialized: false as boolean\n}\n\nexport type AppInitialStateType = typeof initialState\n\nexport const appReducer = (state = initialState, action: AppActionsType): AppInitialStateType => {\n    switch (action.type) {\n        case 'APP/SET-STATUS':\n            return {...state, status: action.status}\n        case 'APP/SET-ERROR':\n            return {...state, error: action.error}\n        case 'APP/SET-APP-INITIALIZED':\n            return {...state, isInitialized: action.value}\n        default:\n            return state\n    }\n}\n\n// Actions\n\nexport const setAppStatus = (status: AppStatusType) => {\n    return {type: 'APP/SET-STATUS', status} as const\n}\nexport const setAppError = (error: AppErrorType) => {\n    return {type: 'APP/SET-ERROR', error} as const\n}\nexport const setAppInitialized = (value: boolean) => {\n    return {type: 'APP/SET-APP-INITIALIZED', value} as const\n}\n\n// Thunks\n\nexport const initializeAppTC = (): ThunkType => async dispatch => {\n    dispatch(setAppStatus('loading'))\n    try {\n        const res = await authAPI.autMe()\n        if (res.data.resultCode === 0) {\n            dispatch(setIsLoggedIn(true))\n            dispatch(setAppStatus('succeeded'))\n        } else {\n            handleServerAppError(res.data, dispatch)\n        }\n    } catch (e) {\n        handlerServerNetworkError((e as Error), dispatch)\n    } finally {\n        dispatch(setAppInitialized(true))\n    }\n\n}\n\nexport type AppActionsType = SetAppStatusType | SetAppErrorType | SetAppInitializedType\nexport type SetAppStatusType = ReturnType<typeof setAppStatus>\nexport type SetAppErrorType = ReturnType<typeof setAppError>\nexport type SetAppInitializedType = ReturnType<typeof setAppInitialized>\n\n\n","import {\n    AddTodolistType, ClearTodosData, RemoveTodolistType,\n    SetTodolistType\n} from \"./todolists-reducer\";\nimport {ChangeTaskModelType, TaskPriorities, TaskStatuses, TaskType, todolistApi} from \"../../api/todolist-api\";\nimport {AppRootStateType, ThunkType} from \"../../app/store\";\nimport {AppStatusType, setAppStatus} from \"../../app/app-reducer\";\nimport {handlerServerNetworkError, handleServerAppError} from \"../../utils/error-utils\";\n\nconst initialState: TasksStateType = {}\n\nexport const tasksReducer = (state = initialState, action: TasksActionsType): TasksStateType => {\n    switch (action.type) {\n        case 'TODOS/REMOVE-TODOLIST':\n            const newState = {...state}\n            delete newState[action.id]\n            return newState\n        case 'TASKS/REMOVE-TASK':\n            return {...state, [action.todolistId]: state[action.todolistId].filter(f => f.id !== action.taskId)}\n        case 'TASKS/ADD-TASK':\n            return {\n                ...state,\n                [action.task.todoListId]: [{...action.task, taskEntityStatus: 'idle'}, ...state[action.task.todoListId]]\n            }\n        case 'TASKS/CHANGE-TASK':\n            return {\n                ...state,\n                [action.todolistId]: state[action.todolistId].map(m => m.id === action.taskId ? {\n                    ...m,\n                    ...action.model\n                } : m)\n            }\n        case 'TODOS/ADD-TODOLIST':\n            return {...state, [action.todolist.id]: []}\n        case 'TODOS/SET-TODOLISTS': {\n            const copyState = {...state}\n            action.todolists.forEach(tl => {\n                copyState[tl.id] = []\n            })\n            return copyState\n            // return action.todolists.reduce((acc, tl) => ({...acc, [tl.id]:[]}), {...state})\n        }\n        case 'TASKS/SET-TASKS':\n            return {...state, [action.todolistId]: action.tasks.map(t => ({...t, taskEntityStatus: 'idle'}))}\n        case 'TASKS/CHANGE-TASK-ENTITY-STATUS':\n            return {\n                ...state,\n                [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {\n                    ...t,\n                    taskEntityStatus: action.entityStatus\n                } : t)\n            }\n        case 'TODOS/CLEAR-TODOS-DATA':\n            return {}\n        default:\n            return state\n    }\n}\n\n// Actions\n\nexport const setTasks = (todolistId: string, tasks: Array<TaskType>) => {\n    return {type: 'TASKS/SET-TASKS', todolistId, tasks} as const\n}\nexport const removeTask = (taskId: string, todolistId: string) => {\n    return {type: 'TASKS/REMOVE-TASK', taskId, todolistId} as const\n}\nexport const addTask = (task: TaskType) => {\n    return {type: 'TASKS/ADD-TASK', task} as const\n}\nexport const changeTask = (taskId: string, model: ChangeTaskDomainModelType, todolistId: string) => {\n    return {type: 'TASKS/CHANGE-TASK', taskId, model, todolistId} as const\n}\nexport const changeTaskEntityStatus = (taskId: string, todolistId: string, entityStatus: AppStatusType) => {\n    return {type: 'TASKS/CHANGE-TASK-ENTITY-STATUS', taskId, todolistId, entityStatus} as const\n}\n\n\n// Thunks\n\nexport const fetchTasksTC = (todolistId: string): ThunkType =>\n    async dispatch => {\n        // dispatch(setAppStatus('loading'))\n        const res = await todolistApi.getTasks(todolistId)\n        dispatch(setTasks(todolistId, res.data.items))\n        // dispatch(setAppStatus('succeeded'))\n    }\n\nexport const removeTaskTC = (todolistId: string, taskId: string): ThunkType =>\n    async dispatch => {\n        dispatch(setAppStatus('loading'))\n        dispatch(changeTaskEntityStatus(taskId, todolistId, 'loading'))\n        try {\n            const res = await todolistApi.removeTask(todolistId, taskId)\n            if (res.data.resultCode === 0) {\n                dispatch(removeTask(taskId, todolistId))\n                dispatch(setAppStatus('succeeded'))\n                dispatch(changeTaskEntityStatus(taskId, todolistId, 'succeeded'))\n            } else {\n                handleServerAppError(res.data, dispatch)\n                dispatch(changeTaskEntityStatus(taskId, todolistId, 'failed'))\n            }\n        } catch (e) {\n            handlerServerNetworkError((e as Error), dispatch)\n            dispatch(changeTaskEntityStatus(taskId, todolistId, 'failed'))\n        }\n\n    }\n\nexport const addTaskTC = (todolistId: string, title: string): ThunkType =>\n    async dispatch => {\n        dispatch(setAppStatus('loading'))\n        try {\n            const res = await todolistApi.addTask(todolistId, title)\n            if (res.data.resultCode === 0) {\n                dispatch(addTask(res.data.data.item))\n                dispatch(setAppStatus('succeeded'))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        } catch (e) {\n            handlerServerNetworkError((e as Error), dispatch)\n        }\n    }\n\n\ntype ChangeTaskDomainModelType = {\n    description?: string\n    title?: string\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    startDate?: string\n    deadline?: string\n}\n\nexport const changeTaskTC = (taskId: string, model: ChangeTaskDomainModelType, todolistId: string): ThunkType =>\n    async (dispatch, getState: () => AppRootStateType) => {\n        const allTasks = getState().tasks\n        const tasksOfCurrentTodolist = allTasks[todolistId]\n        const task = tasksOfCurrentTodolist.find(t => t.id === taskId)\n\n        if (!task) {\n            console.warn('Task not found in the state')\n            return\n        }\n\n        const apiModel: ChangeTaskModelType = {\n            description: task.description,\n            title: task.title,\n            status: task.status,\n            priority: task.priority,\n            startDate: task.startDate,\n            deadline: task.deadline,\n            ...model\n        }\n        dispatch(setAppStatus('loading'))\n        dispatch(changeTaskEntityStatus(taskId, todolistId, 'loading'))\n        try {\n            const res = await todolistApi.changeTask(todolistId, taskId, apiModel)\n            if (res.data.resultCode === 0) {\n                dispatch(changeTask(taskId, model, todolistId))\n                dispatch(setAppStatus('succeeded'))\n                dispatch(changeTaskEntityStatus(taskId, todolistId, 'succeeded'))\n\n            } else {\n                handleServerAppError(res.data, dispatch)\n                dispatch(changeTaskEntityStatus(taskId, todolistId, 'failed'))\n\n            }\n        } catch (e) {\n            handlerServerNetworkError((e as Error), dispatch)\n            dispatch(changeTaskEntityStatus(taskId, todolistId, 'failed'))\n        }\n    }\n\n// Types\n\nexport type TaskDomainType = TaskType & {\n    taskEntityStatus: AppStatusType\n}\n\nexport type TasksStateType = { [key: string]: Array<TaskDomainType> }\n\nexport type TasksActionsType =\n    ReturnType<typeof removeTask>\n    | ReturnType<typeof addTask>\n    | ReturnType<typeof changeTask>\n    | AddTodolistType\n    | RemoveTodolistType\n    | SetTodolistType\n    | ReturnType<typeof setTasks>\n    | ReturnType<typeof changeTaskEntityStatus>\n    | ClearTodosData","import {todolistApi, TodolistType} from \"../../api/todolist-api\";\nimport {AppStatusType, setAppStatus} from \"../../app/app-reducer\";\nimport {ThunkType} from \"../../app/store\";\nimport {handlerServerNetworkError, handleServerAppError} from \"../../utils/error-utils\";\nimport {fetchTasksTC} from \"./tasks-reducer\";\n\nconst initialState: Array<TodolistDomainType> = []\n\nexport const todolistsReducer = (state = initialState, action: TodolistsActionsType): Array<TodolistDomainType> => {\n    switch (action.type) {\n        case \"TODOS/SET-TODOLISTS\":\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\n        case 'TODOS/ADD-TODOLIST':\n            const newTodolist: TodolistDomainType = {...action.todolist, filter: 'all', entityStatus: 'idle'}\n            return [newTodolist, ...state]\n        case 'TODOS/REMOVE-TODOLIST':\n            return state.filter(f => f.id !== action.id)\n        case 'TODOS/CHANGE-TODOLIST-TITLE':\n            return state.map(m => m.id === action.todolistId ? {...m, title: action.title} : m)\n        case 'TODOS/CHANGE-TODOLIST-FILTER':\n            return state.map(m => m.id === action.id ? {...m, filter: action.filter} : m)\n        case 'TODOS/CHANGE-TODOLIST-ENTITY-STATUS':\n            return state.map(m => m.id === action.id ? {...m, entityStatus: action.entityStatus} : m)\n        case 'TODOS/CLEAR-TODOS-DATA': \n            return []\n        default:\n            return state\n    }\n}\n\n// Actions\n\nexport const setTodolists = (todolists: Array<TodolistType>) => {\n    return {type: 'TODOS/SET-TODOLISTS', todolists} as const\n}\nexport const removeTodolist = (todolistID: string) => {\n    return {type: 'TODOS/REMOVE-TODOLIST', id: todolistID} as const\n}\nexport const addTodolist = (todolist: TodolistType) => {\n    return {type: 'TODOS/ADD-TODOLIST', todolist} as const\n}\nexport const changeTodolistTitle = (todolistId: string, title: string) => {\n    return {type: 'TODOS/CHANGE-TODOLIST-TITLE', todolistId, title} as const\n}\nexport const changeTodolistFilter = (id: string, filter: FilterValuesType) => {\n    return {type: 'TODOS/CHANGE-TODOLIST-FILTER', id, filter} as const\n}\nexport const changeTodolistEntityStatus = (id: string, entityStatus: AppStatusType) => {\n    return {type: 'TODOS/CHANGE-TODOLIST-ENTITY-STATUS', id, entityStatus} as const\n}\nexport const clearTodosData = () => ({type: 'TODOS/CLEAR-TODOS-DATA'} as const)\n\n// Thunks\n\nexport const fetchTodolistsTC = (): ThunkType =>\n    async dispatch => {\n        dispatch(setAppStatus('loading'))\n        try {\n            const res = await todolistApi.getTodolists()\n            dispatch(setTodolists(res.data))\n            try {\n                const res = await todolistApi.getTodolists()\n                res.data.forEach(tl => {\n                    dispatch(fetchTasksTC(tl.id))\n                    dispatch(setAppStatus('succeeded'))\n                })\n            } catch (e) {\n                handlerServerNetworkError((e as Error), dispatch)\n            }\n        } catch (e) {\n            handlerServerNetworkError((e as Error), dispatch)\n        }\n    }\n\nexport const removeTodolistTC = (todolistId: string): ThunkType =>\n    async dispatch => {\n        dispatch(setAppStatus('loading'))\n        dispatch(changeTodolistEntityStatus(todolistId, 'loading'))\n        try {\n            const res = await todolistApi.removeTodolist(todolistId)\n            if (res.data.resultCode === 0) {\n                dispatch(removeTodolist(todolistId))\n                dispatch(setAppStatus('succeeded'))\n            } else {\n                handleServerAppError(res.data, dispatch)\n                dispatch(changeTodolistEntityStatus(todolistId, 'failed'))\n            }\n\n        } catch (e) {\n            handlerServerNetworkError((e as Error), dispatch)\n            dispatch(changeTodolistEntityStatus(todolistId, 'failed'))\n        }\n    }\n\nexport const addTodolistTC = (title: string): ThunkType =>\n    async dispatch => {\n        dispatch(setAppStatus('loading'))\n        try {\n            const res = await todolistApi.addTodolist(title)\n            if (res.data.resultCode === 0) {\n                dispatch(addTodolist(res.data.data.item))\n                dispatch(setAppStatus('succeeded'))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        } catch (e) {\n            handlerServerNetworkError((e as Error), dispatch)\n\n        }\n\n\n    }\n\nexport const changeTodolistTitleTC = (todolistId: string, title: string): ThunkType =>\n    async dispatch => {\n        dispatch(setAppStatus('loading'))\n        try {\n            const res = await todolistApi.changeTodolistTitle(todolistId, title)\n            if (res.data.resultCode === 0) {\n                dispatch(changeTodolistTitle(todolistId, title))\n                dispatch(setAppStatus('succeeded'))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        } catch (e) {\n            handlerServerNetworkError((e as Error), dispatch)\n        }\n\n    }\n\n// Types\n\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\n\nexport type TodolistDomainType = TodolistType & {\n    filter: FilterValuesType\n    entityStatus: AppStatusType\n}\n\nexport type TodolistsActionsType =\n    RemoveTodolistType\n    | AddTodolistType\n    | ReturnType<typeof changeTodolistTitle>\n    | ReturnType<typeof changeTodolistFilter>\n    | SetTodolistType\n    | ReturnType<typeof changeTodolistEntityStatus>\n    | ClearTodosData\n\nexport type AddTodolistType = ReturnType<typeof addTodolist>\nexport type RemoveTodolistType = ReturnType<typeof removeTodolist>\nexport type SetTodolistType = ReturnType<typeof setTodolists>\nexport type ClearTodosData = ReturnType<typeof clearTodosData>","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from 'react';\nimport {IconButton, TextField} from \"@mui/material\";\nimport {ControlPoint} from \"@mui/icons-material\";\n\nexport type AddItemFormType = {\n    callBack: (title: string) => void\n    disabled?: boolean\n}\n\nexport const AddItemForm = React.memo(({disabled = false, callBack}: AddItemFormType) => {\n    let [title, setTitle] = useState(\"\")\n    let [error, setError] = useState<boolean>(false)\n    const onClickAddHandler = useCallback(() => {\n        if (title.trim()) {\n            callBack(title.trim())\n            setTitle(\"\");\n        } else {\n            setError(true);\n        }\n    }, [title, callBack])\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setError(false)\n        setTitle(e.currentTarget.value)\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Enter') {\n            onClickAddHandler();\n        }\n    }\n    return (\n        <div>\n            <TextField\n                value={title}\n                disabled={disabled}\n                onChange={onChangeHandler}\n                onKeyPress={onKeyPressHandler}\n                error={error}\n                variant={'outlined'}\n                label={error ? 'Incorrect title' : 'Type title'}\n            />\n            <IconButton onClick={onClickAddHandler} color={'primary'} disabled={disabled}>\n                <ControlPoint/>\n            </IconButton>\n        </div>\n    );\n})\n\n","import {TextField} from '@mui/material';\nimport React, {ChangeEvent, KeyboardEvent, useCallback, useState} from 'react';\n\ntype EditableSpanType = {\n    title: string\n    callBack: (title: string) => void\n    disabled?: boolean\n}\nexport const EditableSpan = React.memo(({\n                                            title,\n                                            disabled = false,\n                                            callBack\n                                        }: EditableSpanType) => {\n\n    const [edit, setEdit] = useState<boolean>(false)\n    const [newTitle, setNewTitle] = useState(title)\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setNewTitle(e.currentTarget.value)\n    }\n    const editTrue = () => {\n        if (!disabled) {\n            setEdit(true)\n        }\n    }\n    const editFalse = useCallback(() => {\n        setEdit(false)\n        callBack(newTitle)\n    }, [callBack, newTitle])\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Enter') {\n            editFalse()\n        }\n    }\n    const handleFocus = (event: React.FocusEvent<HTMLInputElement>) => event.currentTarget.select()\n    return (\n        edit ? <TextField\n            disabled={disabled}\n            onFocus={handleFocus}\n            variant={\"standard\"}\n            value={newTitle}\n            onKeyPress={onKeyPressHandler}\n            onChange={onChangeHandler}\n            onBlur={editFalse}\n            autoFocus/> : <span onDoubleClick={editTrue}>{title}</span>\n    )\n})\n\n","import React, {ChangeEvent, useCallback} from 'react';\nimport {Checkbox, IconButton} from \"@mui/material\";\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\nimport {Delete} from \"@mui/icons-material\";\nimport {TaskStatuses, TaskType} from \"../../../../api/todolist-api\";\nimport {changeTaskTC} from \"../../tasks-reducer\";\nimport {useDispatch} from 'react-redux';\nimport {AppStatusType} from \"../../../../app/app-reducer\";\n\ntype TaskPropsType = {\n    task: TaskType\n    todolistId: string\n    updateTask: (taskID: string, title: string) => void\n    removeTask: (taskID: string) => void\n    taskEntityStatus: AppStatusType\n}\n\nexport const Task = React.memo(({taskEntityStatus, task, updateTask, removeTask, todolistId}: TaskPropsType) => {\n    const dispatch = useDispatch()\n\n\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        const newIsDoneValue = e.currentTarget.checked\n        dispatch(changeTaskTC(task.id, {status: newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New}, todolistId))\n    }, [dispatch, todolistId, task.id])\n\n    return <li className={task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\n        <Checkbox\n            disabled={taskEntityStatus === 'loading'}\n            onChange={onChangeHandler}\n            checked={task.status === TaskStatuses.Completed}/>\n        <EditableSpan title={task.title}\n                      callBack={(title: string) => updateTask(task.id, title)}\n                      disabled={taskEntityStatus === 'loading'}\n        />\n\n        <IconButton onClick={() => removeTask(task.id)} disabled={taskEntityStatus === 'loading'}>\n            <Delete/>\n        </IconButton>\n\n    </li>\n})\n\n","import React, {useCallback} from 'react';\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\nimport {Button, IconButton} from \"@mui/material\";\nimport {Delete} from '@mui/icons-material';\nimport {Task} from './Task/Task';\nimport {\n    changeTodolistFilter,\n    changeTodolistTitleTC,\n    removeTodolistTC,\n    FilterValuesType\n} from '../todolists-reducer';\nimport {TaskStatuses} from '../../../api/todolist-api';\nimport {useDispatch} from 'react-redux';\nimport {addTaskTC, changeTaskTC, removeTaskTC, TaskDomainType} from \"../tasks-reducer\";\nimport {AppStatusType} from \"../../../app/app-reducer\";\n\n\ntype PropsType = {\n    todolistId: string\n    title: string\n    tasks: Array<TaskDomainType>\n    filter: FilterValuesType\n    entityStatus: AppStatusType\n}\n\nexport const Todolist = React.memo(({entityStatus, todolistId, ...props}: PropsType) => {\n    const dispatch = useDispatch()\n\n    const removeTodolistHandler = useCallback(() => {\n        dispatch(removeTodolistTC(todolistId))\n    }, [dispatch, todolistId])\n\n    const changeFilter = useCallback((value: FilterValuesType) => {\n        dispatch(changeTodolistFilter(todolistId, value))\n    }, [dispatch, todolistId])\n\n    const removeTaskHandler = useCallback((taskId: string) => {\n        dispatch(removeTaskTC(todolistId, taskId))\n    }, [dispatch, todolistId])\n\n    const addTaskHandler = useCallback((title: string) => {\n        dispatch(addTaskTC(todolistId, title))\n    }, [dispatch, todolistId])\n\n    const updateTaskHandler = useCallback((taskID: string, title: string) => {\n        dispatch(changeTaskTC(taskID, {title}, todolistId))\n    }, [dispatch, todolistId])\n\n    const changeTodolistTitle = useCallback((title: string) => {\n        dispatch(changeTodolistTitleTC(todolistId, title))\n    }, [dispatch, todolistId])\n\n\n    let tasksForTodolist = props.tasks\n    if (props.filter === \"active\") {\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New);\n    }\n    if (props.filter === \"completed\") {\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed);\n    }\n\n    return <div className='Todolist'>\n\n        <h3><EditableSpan title={props.title} callBack={changeTodolistTitle} disabled={entityStatus === 'loading'}/>\n            <IconButton onClick={removeTodolistHandler} disabled={entityStatus === 'loading'}>\n                <Delete/>\n            </IconButton>\n        </h3>\n        <AddItemForm callBack={addTaskHandler} disabled={entityStatus === 'loading'}/>\n        <div>\n            <ul>\n                {\n                    tasksForTodolist.map(t => <Task key={t.id}\n                                                    task={t}\n                                                    todolistId={todolistId}\n                                                    removeTask={removeTaskHandler}\n                                                    updateTask={updateTaskHandler}\n                                                    taskEntityStatus={t.taskEntityStatus}\n                        />\n                    )\n                }\n            </ul>\n        </div>\n        <div>\n\n            <Button variant={props.filter === 'all' ? 'contained' : 'text'}\n                    onClick={() => changeFilter('all')}>All</Button>\n            <Button variant={props.filter === 'active' ? 'contained' : 'text'}\n                    onClick={() => changeFilter('active')}>Active</Button>\n            <Button variant={props.filter === 'completed' ? 'contained' : 'text'}\n                    onClick={() => changeFilter('completed')}>Completed</Button>\n\n        </div>\n    </div>\n})\n\n\n","import React, {useCallback, useEffect} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {addTodolistTC, fetchTodolistsTC, TodolistDomainType} from \"./todolists-reducer\";\nimport {TasksStateType} from \"./tasks-reducer\";\nimport {Grid, Paper} from \"@mui/material\";\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\nimport {Todolist} from \"./Todolist/Todolist\";\nimport {Navigate} from \"react-router-dom\";\n\ntype TodosListType = {\n    demo?: boolean\n}\n\nexport const TodolistsList = React.memo(({demo = false}: TodosListType) => {\n\n    const dispatch = useDispatch()\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n\n    useEffect(() => {\n        if (!isLoggedIn) {\n            return\n        }\n        if (!demo) dispatch(fetchTodolistsTC())\n    }, [dispatch, demo, isLoggedIn])\n\n\n    const addTodolistHandler = useCallback((title: string) => {\n        dispatch(addTodolistTC(title))\n    }, [dispatch])\n    if (!isLoggedIn) {\n        return <Navigate to={'/login'}/>\n    }\n    return <>\n        <Grid container style={{padding: '20px 0'}}>\n            <AddItemForm callBack={addTodolistHandler}/>\n        </Grid>\n        <Grid container spacing={3}>\n            {\n                todolists.map(tl => {\n                    let tasksForTodolist = tasks[tl.id];\n\n                    return (\n                        <Grid item key={tl.id}>\n                            <Paper style={{padding: '10px'}}>\n                                <Todolist\n                                    key={tl.id}\n                                    todolistId={tl.id}\n                                    title={tl.title}\n                                    tasks={tasksForTodolist}\n                                    filter={tl.filter}\n                                    entityStatus={tl.entityStatus}\n                                />\n                            </Paper>\n                        </Grid>\n                    )\n                })\n            }\n        </Grid>\n    </>\n\n\n})","import * as React from 'react';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\nimport {AppErrorType, setAppError} from \"../../app/app-reducer\";\nimport {useDispatch, useSelector } from 'react-redux';\nimport {AppRootStateType} from \"../../app/store\";\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props,\n    ref,\n) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n})\n\nexport function ErrorSnackbar() {\n    const dispatch = useDispatch()\n    const error = useSelector<AppRootStateType, AppErrorType>(state => state.app.error)\n    const isOpen = error !== null\n\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        dispatch(setAppError(null))\n    }\n\n    return (\n            <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose} anchorOrigin={{horizontal: 'center', vertical: 'bottom'}}>\n                <Alert onClose={handleClose} severity=\"error\" sx={{ width: '100%' }}>\n                    {error}\n                </Alert>\n            </Snackbar>\n\n    )\n}","import React from 'react'\nimport Grid from '@mui/material/Grid';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormLabel from '@mui/material/FormLabel';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport {useFormik} from 'formik';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {loginTC} from \"./auth-reducer\";\nimport {AppRootStateType} from '../../app/store';\nimport {Navigate} from 'react-router-dom';\nimport {LoginPramsType} from \"../../api/auth-api\";\n\n\nexport const Login = () => {\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n    const dispatch = useDispatch()\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false\n        },\n        validate: (values) => {\n            const errors: Partial<Omit<LoginPramsType, 'captcha'>> = {}\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if (!values.password) {\n                errors.password = 'Required';\n            } else if (values.password.length < 3) {\n                errors.password = 'Must be more than two characters';\n            }\n            return errors;\n        },\n        onSubmit: values => {\n            console.log(values)\n            dispatch(loginTC(values))\n            formik.resetForm()\n        },\n    })\n\n    if (isLoggedIn) {\n        return <Navigate to={'/'}/>\n    }\n    return <Grid container justifyContent={'center'}>\n        <Grid item justifyContent={'center'}>\n            <form onSubmit={formik.handleSubmit}>\n                <FormControl>\n                    <FormLabel>\n                        <p>To log in get registered\n                            <a href={'https://social-network.samuraijs.com/'}\n                               target={'_blank'}> here\n                            </a>\n                        </p>\n                        <p>or use common test account credentials:</p>\n                        <p>Email: free@samuraijs.com</p>\n                        <p>Password: free</p>\n                    </FormLabel>\n                    <FormGroup>\n                        <TextField label=\"Email\" margin=\"normal\" type=\"email\"\n                                   {...formik.getFieldProps('email')}/>\n                        {formik.touched.email && formik.errors.email &&\n                        <div style={{color: 'red'}}>{formik.errors.email}</div>}\n                        <TextField type=\"password\" label=\"Password\" margin=\"normal\"\n                                   {...formik.getFieldProps('password')}\n                        />\n                        {formik.touched.password && formik.errors.password &&\n                        <div style={{color: 'red'}}>{formik.errors.password}</div>}\n                        <FormControlLabel label={'Remember me'} control={<Checkbox\n                            {...formik.getFieldProps('rememberMe')}/>}/>\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\n                            Login\n                        </Button>\n                    </FormGroup>\n                </FormControl>\n            </form>\n        </Grid>\n    </Grid>\n\n}\n\n\n","import React, {useEffect} from 'react';\nimport './App.css';\nimport {Menu} from '@mui/icons-material';\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./store\";\nimport {AppStatusType, initializeAppTC} from \"./app-reducer\";\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Toolbar from '@mui/material/Toolbar';\nimport AppBar from '@mui/material/AppBar';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\nimport Container from '@mui/material/Container';\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\nimport {Login} from \"../features/Login/Login\";\nimport {Navigate, Route, Routes} from \"react-router-dom\";\nimport CircularProgress from '@mui/material/CircularProgress';\nimport {logoutTC} from \"../features/Login/auth-reducer\";\n\ntype AppPropsType = {\n    demo?: boolean\n}\n\nexport const App = React.memo(({demo = false}: AppPropsType) => {\n    const appStatus = useSelector<AppRootStateType, AppStatusType>(state => state.app.status)\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(initializeAppTC())\n    }, [dispatch])\n\n    const logoutHandler = () => {\n        dispatch(logoutTC())\n    }\n\n    if (!isInitialized) {\n        return <div\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\n            <CircularProgress/>\n        </div>\n    }\n\n    return (\n        <div className=\"App\">\n            <ErrorSnackbar/>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton size=\"large\" edge=\"start\" color=\"inherit\" aria-label=\"menu\" sx={{mr: 2}}>\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\n                        TO DO LIST\n                    </Typography>\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\n                </Toolbar>\n            </AppBar>\n            <div style={{width: '100%', height: '5px'}}>{appStatus === 'loading' && <LinearProgress/>}</div>\n            <Container fixed>\n                <Routes>\n                    <Route path={'/'} element={<TodolistsList demo={demo}/>}/>\n                    <Route path={'/login'} element={<Login/>}/>\n                    <Route path={'/404'} element={<h1 style={{textAlign: 'center'}}>404: PAGE NOT FOUND</h1>}/>\n                    <Route path={'*'} element={<Navigate to={'/404'}/>}/>\n                </Routes>\n            </Container>\n        </div>\n    )\n})\n\n\n","import {applyMiddleware, combineReducers, createStore } from \"redux\";\nimport {TasksActionsType, tasksReducer} from \"../features/TodolistsList/tasks-reducer\";\nimport {TodolistsActionsType, todolistsReducer} from \"../features/TodolistsList/todolists-reducer\";\nimport thunkMiddleware, { ThunkAction } from 'redux-thunk';\nimport {AppActionsType, appReducer} from \"./app-reducer\";\nimport {AuthActionsType, authReducer} from \"../features/Login/auth-reducer\";\n\nconst rootReducer = combineReducers({\n    todolists: todolistsReducer,\n    tasks: tasksReducer,\n    app: appReducer,\n    auth: authReducer,\n})\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\nexport type RootAppActionsType = TodolistsActionsType | TasksActionsType | AppActionsType | AuthActionsType\n\nexport type ThunkType = ThunkAction<void, AppRootStateType, unknown, RootAppActionsType>\n\n// @ts-ignore\nwindow.store = store\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {App} from \"./app/App\";\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>,\n\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}