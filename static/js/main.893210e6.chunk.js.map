{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","utils/error-utils.ts","api/auth-api.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistApi","get","title","post","todolistId","delete","put","taskId","model","handleServerAppError","data","dispatch","messages","setAppError","error","setAppStatus","status","handlerServerNetworkError","message","authAPI","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedIn","state","action","payload","authReducer","reducer","actions","isInitialized","setAppInitialized","appReducer","setTasks","tasks","map","t","taskEntityStatus","removeTask","index","findIndex","id","splice","addTask","task","todoListId","unshift","changeTask","changeTaskEntityStatus","entityStatus","extraReducers","builder","addCase","removeTodolist","addTodolist","todolist","setTodolists","todolists","forEach","tl","clearTodosData","tasksReducer","changeTaskTC","getState","a","allTasks","tasksOfCurrentTodolist","find","console","warn","apiModel","description","priority","startDate","deadline","res","resultCode","filter","changeTodolistTitle","changeTodolistFilter","changeTodolistEntityStatus","todolistsReducer","AddItemForm","React","memo","disabled","callBack","useState","setTitle","setError","onClickAddHandler","useCallback","trim","TextField","value","onChange","e","currentTarget","onKeyPress","key","variant","label","IconButton","onClick","color","ControlPoint","EditableSpan","edit","setEdit","newTitle","setNewTitle","editFalse","onFocus","event","select","onBlur","autoFocus","onDoubleClick","Task","updateTask","useDispatch","onChangeHandler","newIsDoneValue","checked","Completed","New","className","Checkbox","Delete","Todolist","props","removeTodolistHandler","removeTodolistTC","changeFilter","removeTaskHandler","removeTaskTC","addTaskHandler","item","addTaskTC","updateTaskHandler","taskID","changeTodolistTitleTC","tasksForTodolist","Button","TodolistsList","demo","useSelector","auth","useEffect","items","addTodolistHandler","addTodolistTC","Grid","container","style","padding","spacing","Paper","to","Alert","ref","elevation","ErrorSnackbar","app","isOpen","handleClose","reason","Snackbar","open","autoHideDuration","onClose","anchorOrigin","horizontal","vertical","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","length","onSubmit","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","type","getFieldProps","touched","FormControlLabel","control","App","appStatus","AppBar","position","Toolbar","size","edge","mr","Menu","Typography","component","flexGrow","height","LinearProgress","Container","fixed","path","element","textAlign","top","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.893210e6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n\t// [::1] is the IPv6 localhost address.\n\twindow.location.hostname === '[::1]' ||\n\t// 127.0.0.0/8 are considered localhost for IPv4.\n\twindow.location.hostname.match(\n\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t// The URL constructor is available in all browsers that support SW.\n\tconst publicUrl = new URL(\n\t\tprocess.env.PUBLIC_URL,\n\t\twindow.location.href\n\t);\n\tif (publicUrl.origin !== window.location.origin) {\n\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\treturn;\n\t}\n\n\twindow.addEventListener('load', () => {\n\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\tif (isLocalhost) {\n\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t// service worker/PWA documentation.\n\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\tconsole.log(\n\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t);\n\t\t});\n\t\t} else {\n\t\t// Is not localhost. Just register service worker\n\t\tregisterValidSW(swUrl, config);\n\t\t}\n\t});\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n\t.register(swUrl)\n\t.then(registration => {\n\t\tregistration.onupdatefound = () => {\n\t\tconst installingWorker = registration.installing;\n\t\tif (installingWorker == null) {\n\t\t\treturn;\n\t\t}\n\t\tinstallingWorker.onstatechange = () => {\n\t\t\tif (installingWorker.state === 'installed') {\n\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t// content until all client tabs are closed.\n\t\t\t\tconsole.log(\n\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t);\n\n\t\t\t\t// Execute callback\n\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t// It's the perfect time to display a\n\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t// Execute callback\n\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t}\n\t\t\t}\n\t\t\t}\n\t\t};\n\t\t};\n\t})\n\t.catch(error => {\n\t\tconsole.error('Error during service worker registration:', error);\n\t});\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n\theaders: { 'Service-Worker': 'script' }\n  })\n\t.then(response => {\n\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\tconst contentType = response.headers.get('content-type');\n\t\tif (\n\t\tresponse.status === 404 ||\n\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n\t\t) {\n\t\t// No service worker found. Probably a different app. Reload the page.\n\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\tregistration.unregister().then(() => {\n\t\t\twindow.location.reload();\n\t\t\t});\n\t\t});\n\t\t} else {\n\t\t// Service worker found. Proceed as normal.\n\t\tregisterValidSW(swUrl, config);\n\t\t}\n\t})\n\t.catch(() => {\n\t\tconsole.log(\n\t\t'No internet connection found. App is running in offline mode.'\n\t\t);\n\t});\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n\tnavigator.serviceWorker.ready\n\t\t.then(registration => {\n\t\tregistration.unregister();\n\t\t})\n\t\t.catch(error => {\n\t\tconsole.error(error.message);\n\t\t});\n  }\n}\n","import axios from 'axios';\n\nconst instance = axios.create({\n\tbaseURL: 'https://social-network.samuraijs.com/api/1.1/',\n\twithCredentials: true,\n\theaders: {\n\t\t'API-KEY': '1e90b645-3ab8-4f0b-b1bb-01b70c47396d',\n\t},\n});\n\nexport const todolistApi = {\n\tasync getTodolists() {\n\t\treturn instance.get<Array<TodolistType>>('todo-lists');\n\t},\n\tasync addTodolist(title: string) {\n\t\treturn instance.post<CommonResponseType<{ item: TodolistType }>>('todo-lists', { title });\n\t},\n\tasync removeTodolist(todolistId: string) {\n\t\treturn instance.delete<CommonResponseType<{}>>(`todo-lists/${todolistId}`);\n\t},\n\tasync changeTodolistTitle(todolistId: string, title: string) {\n\t\treturn instance.put<CommonResponseType<{}>>(`todo-lists/${todolistId}`, { title });\n\t},\n\tasync getTasks(todolistId: string) {\n\t\treturn instance.get<GetTasksResponseType>(`todo-lists/${todolistId}/tasks`);\n\t},\n\tasync removeTask(todolistId: string, taskId: string) {\n\t\treturn instance.delete<CommonResponseType<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`);\n\t},\n\tasync addTask(todolistId: string, title: string) {\n\t\treturn instance.post<CommonResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks/`, { title });\n\t},\n\tasync changeTask(todolistId: string, taskId: string, model: ChangeTaskModelType) {\n\t\treturn instance.put<CommonResponseType<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\n\t},\n};\n\n// Types\n\nexport type CommonResponseType<T> = {\n\tresultCode: number;\n\tmessages: Array<string>;\n\tfieldErrors: Array<string>;\n\tdata: T;\n};\n\nexport type TodolistType = {\n\tid: string;\n\ttitle: string;\n\taddedDate: string;\n\torder: number;\n};\n\nexport enum TaskStatuses {\n\tNew = 0,\n\tInProgress = 1,\n\tCompleted = 2,\n\tDraft = 3,\n}\n\nexport enum TaskPriorities {\n\tLow = 0,\n\tMiddle = 1,\n\tHi = 2,\n\tUrgently = 3,\n\tLater = 4,\n}\n\nexport type TaskType = {\n\tdescription: string;\n\ttitle: string;\n\tstatus: TaskStatuses;\n\tpriority: TaskPriorities;\n\tstartDate: string;\n\tdeadline: string;\n\tid: string;\n\ttodoListId: string;\n\torder: number;\n\taddedDate: string;\n};\n\nexport type ChangeTaskModelType = {\n\tdescription: string;\n\ttitle: string;\n\tstatus: TaskStatuses;\n\tpriority: TaskPriorities;\n\tstartDate: string;\n\tdeadline: string;\n};\n\ntype GetTasksResponseType = {\n\titems: Array<TaskType>;\n\ttotalCount: number;\n\terror: string;\n};\n","import {setAppError, setAppStatus} from '../app/app-reducer';\nimport { CommonResponseType } from '../api/todolist-api';\nimport { Dispatch } from 'redux';\n\nexport const handleServerAppError = <T>(\n\tdata: CommonResponseType<T>,\n\tdispatch: Dispatch\n) => {\n\tif (data.messages) {\n\t\tdispatch(setAppError({error: data.messages[0]}));\n\t} else {\n\t\tdispatch(setAppError({error: 'Some error occurred'}));\n\t}\n\tdispatch(setAppStatus({status: 'failed'}));\n};\n\nexport const handlerServerNetworkError = (\n\terror: { message: string  },\n\tdispatch: Dispatch\n) => {\n\tdispatch(\n\t\tsetAppError({error: error.message ?? 'Some error occurred'})\n\t);\n\tdispatch(setAppStatus({status: 'failed'}));\n};\n\n","import { CommonResponseType } from './todolist-api';\nimport axios from 'axios';\n\nconst instance = axios.create({\n\tbaseURL: 'https://social-network.samuraijs.com/api/1.1/',\n\twithCredentials: true,\n\theaders: {\n\t\t'API-KEY': '1e90b645-3ab8-4f0b-b1bb-01b70c47396d',\n\t},\n});\n\nexport const authAPI = {\n\tasync autMe() {\n\t\treturn instance.get<CommonResponseType<AuthMeType>>(`auth/me`);\n\t},\n\tasync login(data: LoginPramsType) {\n\t\treturn instance.post<CommonResponseType<{ userId: number }>>(\n\t\t\t`auth/login/`,\n\t\t\tdata\n\t\t);\n\t},\n\tasync logout() {\n\t\treturn instance.delete<CommonResponseType<{}>>(`auth/login`);\n\t},\n};\ntype AuthMeType = {\n\tid: number;\n\temail: string;\n\tlogin: string;\n};\nexport type LoginPramsType = {\n\temail: string;\n\tpassword: string;\n\trememberMe?: boolean;\n\tcaptcha?: boolean;\n};\n","import {ThunkType} from '../../app/store';\nimport {handlerServerNetworkError, handleServerAppError} from '../../utils/error-utils';\nimport {authAPI, LoginPramsType} from '../../api/auth-api';\nimport {clearTodosData} from '../TodolistsList/todolists-reducer';\nimport {createSlice, PayloadAction} from '@reduxjs/toolkit';\nimport {setAppStatus} from '../../app/app-reducer';\n\nconst initialState = {\n\tisLoggedIn: false as boolean\n};\n\nconst slice = createSlice({\n\tname: 'auth',\n\tinitialState,\n\treducers: {\n\t\tsetIsLoggedIn(state, action: PayloadAction<{ isLoggedIn: boolean }>) {\n\t\t\tstate.isLoggedIn = action.payload.isLoggedIn;\n\t\t}\n\t}\n});\n\nexport const authReducer = slice.reducer;\nexport const {setIsLoggedIn} = slice.actions;\n\n// thunks\nexport const loginTC = (data: LoginPramsType): ThunkType => async (dispatch) => {\n\tdispatch(setAppStatus({status: 'loading'}));\n\ttry {\n\t\tconst res = await authAPI.login(data);\n\t\tif (res.data.resultCode === 0) {\n\t\t\tdispatch(setIsLoggedIn({isLoggedIn: true}));\n\t\t\tdispatch(setAppStatus({status: 'succeeded'}));\n\n\t\t} else {\n\t\t\thandleServerAppError(res.data, dispatch);\n\t\t}\n\t} catch (e) {\n\t\thandlerServerNetworkError(e as Error, dispatch);\n\t}\n};\nexport const logoutTC = (): ThunkType => async (dispatch) => {\n\tdispatch(setAppStatus({status: 'loading'}));\n\ttry {\n\t\tconst res = await authAPI.logout();\n\t\tif (res.data.resultCode === 0) {\n\t\t\tdispatch(setIsLoggedIn({isLoggedIn: false}));\n\t\t\tdispatch(setAppStatus({status: 'succeeded'}));\n\t\t\tdispatch(clearTodosData({}));\n\t\t} else {\n\t\t\thandleServerAppError(res.data, dispatch);\n\t\t}\n\t} catch (e) {\n\t\thandlerServerNetworkError(e as Error, dispatch);\n\t}\n};\n\n","import {ThunkType} from './store';\nimport {handlerServerNetworkError, handleServerAppError} from '../utils/error-utils';\nimport {setIsLoggedIn} from '../features/Login/auth-reducer';\nimport {authAPI} from '../api/auth-api';\nimport {PayloadAction, createSlice} from '@reduxjs/toolkit';\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\nexport type AppErrorType = string | null;\n\nconst initialState = {\n\tstatus: 'idle' as RequestStatusType,\n\terror: null as AppErrorType,\n\tisInitialized: false as boolean,\n};\n\nconst slice = createSlice({\n\tname: 'app',\n\tinitialState,\n\treducers: {\n\t\tsetAppStatus(state, action: PayloadAction<{ status: RequestStatusType }>) {\n\t\t\tstate.status = action.payload.status;\n\t\t},\n\t\tsetAppError(state, action: PayloadAction<{ error: AppErrorType }>) {\n\t\t\tstate.error = action.payload.error;\n\t\t},\n\t\tsetAppInitialized(state, action: PayloadAction<{ isInitialized: boolean }>) {\n\t\t\tstate.isInitialized = action.payload.isInitialized;\n\t\t}\n\t}\n});\n\nexport const appReducer = slice.reducer;\nexport const {setAppStatus, setAppError, setAppInitialized} = slice.actions;\n\n// Thunks\n\nexport const initializeAppTC = (): ThunkType => async (dispatch) => {\n\tdispatch(setAppStatus({status: 'loading'}));\n\ttry {\n\t\tconst res = await authAPI.autMe();\n\t\tif (res.data.resultCode === 0) {\n\t\t\tdispatch(setIsLoggedIn({isLoggedIn: true}));\n\t\t\tdispatch(setAppStatus({status: 'succeeded'}));\n\t\t} else {\n\t\t\thandleServerAppError(res.data, dispatch);\n\t\t}\n\t} catch (e) {\n\t\thandlerServerNetworkError(e as Error, dispatch);\n\t} finally {\n\t\tdispatch(setAppInitialized({isInitialized: true}));\n\t}\n};\n\n","import {\n\tChangeTaskModelType,\n\tTaskPriorities,\n\tTaskStatuses,\n\tTaskType,\n\ttodolistApi\n} from '../../api/todolist-api';\nimport {RootStateType, ThunkType} from '../../app/store';\nimport {RequestStatusType, setAppStatus} from '../../app/app-reducer';\nimport {\n\thandlerServerNetworkError,\n\thandleServerAppError,\n} from '../../utils/error-utils';\nimport {PayloadAction, createSlice} from '@reduxjs/toolkit';\nimport {\n\taddTodolist,\n\tclearTodosData,\n\tremoveTodolist,\n\tsetTodolists\n} from './todolists-reducer';\n\n\nexport type TaskDomainType = TaskType & {\n\ttaskEntityStatus: RequestStatusType;\n};\nexport type TasksStateType = { [key: string]: Array<TaskDomainType> };\nconst initialState: TasksStateType = {};\n\n\nconst slice = createSlice({\n\tname: 'tasks',\n\tinitialState,\n\treducers: {\n\t\tsetTasks(state, action: PayloadAction<{ todolistId: string, tasks: Array<TaskType> }>) {\n\t\t\tstate[action.payload.todolistId] = action.payload.tasks.map(t => ({...t, taskEntityStatus: 'idle'}));\n\t\t},\n\t\tremoveTask(state, action: PayloadAction<{ taskId: string, todolistId: string }>) {\n\t\t\tconst tasks = state[action.payload.todolistId];\n\t\t\tconst index = tasks.findIndex(t => t.id === action.payload.taskId);\n\t\t\tif (index > -1) {\n\t\t\t\ttasks.splice(index, 1);\n\t\t\t}\n\t\t},\n\t\taddTask(state, action: PayloadAction<{ task: TaskType }>) {\n\t\t\tconst tasks = state[action.payload.task.todoListId];\n\t\t\ttasks.unshift({...action.payload.task, taskEntityStatus: 'idle'});\n\t\t},\n\t\tchangeTask(state, action: PayloadAction<{\n\t\t\ttaskId: string, model: ChangeTaskDomainModelType,\n\t\t\ttodolistId: string\n\t\t}>) {\n\t\t\tconst tasks = state[action.payload.todolistId];\n\t\t\tconst index = tasks.findIndex(t => t.id === action.payload.taskId);\n\t\t\tif (index > -1) {\n\t\t\t\ttasks[index] = {...tasks[index], ...action.payload.model};\n\t\t\t}\n\t\t},\n\t\tchangeTaskEntityStatus(state, action: PayloadAction<{\n\t\t\ttaskId: string, todolistId: string,\n\t\t\tentityStatus: RequestStatusType\n\t\t}>) {\n\t\t\tconst tasks = state[action.payload.todolistId];\n\t\t\tconst index = tasks.findIndex(t => t.id === action.payload.taskId);\n\t\t\tif (index > -1) {\n\t\t\t\ttasks[index] = {...tasks[index], taskEntityStatus: action.payload.entityStatus};\n\t\t\t}\n\t\t}\n\t},\n\textraReducers: (builder) => {\n\t\tbuilder.addCase(removeTodolist, (state, {payload}) => {\n\t\t\tdelete state[payload.todolistId];\n\t\t});\n\t\tbuilder.addCase(addTodolist, (state, {payload}) => {\n\t\t\tstate[payload.todolist.id] = [];\n\t\t});\n\t\tbuilder.addCase(setTodolists, (state, {payload}) => {\n\t\t\tpayload.todolists.forEach((tl) => {\n\t\t\t\tstate[tl.id] = [];\n\t\t\t});\n\t\t});\n\t\tbuilder.addCase(clearTodosData, (state, {payload}) => {\n\t\t\treturn {};\n\t\t});\n\t}\n});\n\nexport const tasksReducer = slice.reducer;\nexport const {\n\tchangeTaskEntityStatus, changeTask, addTask,\n\tremoveTask, setTasks\n} = slice.actions;\n\n// Thunks\n\nexport const fetchTasksTC =\n\t(todolistId: string): ThunkType =>\n\t\tasync (dispatch) => {\n\t\t\t// dispatch(setAppStatus('loading'))\n\t\t\tconst res = await todolistApi.getTasks(todolistId);\n\t\t\tdispatch(setTasks({todolistId, tasks: res.data.items}));\n\t\t\t// dispatch(setAppStatus('succeeded'))\n\t\t};\n\nexport const removeTaskTC =\n\t(todolistId: string, taskId: string): ThunkType =>\n\t\tasync (dispatch) => {\n\t\t\tdispatch(setAppStatus({status: 'loading'}));\n\t\t\tdispatch(changeTaskEntityStatus({taskId, todolistId, entityStatus: 'loading'}));\n\t\t\ttry {\n\t\t\t\tconst res = await todolistApi.removeTask(todolistId, taskId);\n\t\t\t\tif (res.data.resultCode === 0) {\n\t\t\t\t\tdispatch(removeTask({taskId, todolistId}));\n\t\t\t\t\tdispatch(setAppStatus({status: 'succeeded'}));\n\t\t\t\t\tdispatch(\n\t\t\t\t\t\tchangeTaskEntityStatus({taskId, todolistId, entityStatus: 'succeeded'})\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\thandleServerAppError(res.data, dispatch);\n\t\t\t\t\tdispatch(changeTaskEntityStatus({taskId, todolistId, entityStatus: 'failed'}));\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\thandlerServerNetworkError(e as Error, dispatch);\n\t\t\t\tdispatch(changeTaskEntityStatus({taskId, todolistId, entityStatus: 'failed'}));\n\t\t\t}\n\t\t};\n\nexport const addTaskTC =\n\t(todolistId: string, title: string): ThunkType =>\n\t\tasync (dispatch) => {\n\t\t\tdispatch(setAppStatus({status: 'loading'}));\n\t\t\ttry {\n\t\t\t\tconst res = await todolistApi.addTask(todolistId, title);\n\t\t\t\tif (res.data.resultCode === 0) {\n\t\t\t\t\tdispatch(addTask({task: res.data.data.item}));\n\t\t\t\t\tdispatch(setAppStatus({status: 'succeeded'}));\n\t\t\t\t} else {\n\t\t\t\t\thandleServerAppError(res.data, dispatch);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\thandlerServerNetworkError(e as Error, dispatch);\n\t\t\t}\n\t\t};\n\ntype ChangeTaskDomainModelType = {\n\tdescription?: string;\n\ttitle?: string;\n\tstatus?: TaskStatuses;\n\tpriority?: TaskPriorities;\n\tstartDate?: string;\n\tdeadline?: string;\n};\n\nexport const changeTaskTC =\n\t(\n\t\ttaskId: string,\n\t\tmodel: ChangeTaskDomainModelType,\n\t\ttodolistId: string\n\t): ThunkType =>\n\t\tasync (dispatch, getState: () => RootStateType) => {\n\t\t\tconst allTasks = getState().tasks;\n\t\t\tconst tasksOfCurrentTodolist = allTasks[todolistId];\n\t\t\tconst task = tasksOfCurrentTodolist.find((t) => t.id === taskId);\n\n\t\t\tif (!task) {\n\t\t\t\tconsole.warn('Task not found in the state');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst apiModel: ChangeTaskModelType = {\n\t\t\t\tdescription: task.description,\n\t\t\t\ttitle: task.title,\n\t\t\t\tstatus: task.status,\n\t\t\t\tpriority: task.priority,\n\t\t\t\tstartDate: task.startDate,\n\t\t\t\tdeadline: task.deadline,\n\t\t\t\t...model,\n\t\t\t};\n\t\t\tdispatch(setAppStatus({status: 'loading'}));\n\t\t\tdispatch(changeTaskEntityStatus({taskId, todolistId, entityStatus: 'loading'}));\n\t\t\ttry {\n\t\t\t\tconst res = await todolistApi.changeTask(\n\t\t\t\t\ttodolistId,\n\t\t\t\t\ttaskId,\n\t\t\t\t\tapiModel\n\t\t\t\t);\n\t\t\t\tif (res.data.resultCode === 0) {\n\t\t\t\t\tdispatch(changeTask({taskId, model, todolistId}));\n\t\t\t\t\tdispatch(setAppStatus({status: 'succeeded'}));\n\t\t\t\t\tdispatch(\n\t\t\t\t\t\tchangeTaskEntityStatus({taskId, todolistId, entityStatus: 'succeeded'})\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\thandleServerAppError(res.data, dispatch);\n\t\t\t\t\tdispatch(changeTaskEntityStatus({taskId, todolistId, entityStatus: 'failed'}));\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\thandlerServerNetworkError(e as Error, dispatch);\n\t\t\t\tdispatch(changeTaskEntityStatus({taskId, todolistId, entityStatus: 'failed'}));\n\t\t\t}\n\t\t};\n\n\n\n","import {todolistApi, TodolistType} from '../../api/todolist-api';\nimport {RequestStatusType, setAppStatus} from '../../app/app-reducer';\nimport {ThunkType} from '../../app/store';\nimport {handlerServerNetworkError, handleServerAppError} from '../../utils/error-utils';\nimport {fetchTasksTC} from './tasks-reducer';\nimport {createSlice, PayloadAction} from '@reduxjs/toolkit';\n\nexport type FilterValuesType = 'all' | 'active' | 'completed';\n\nexport type TodolistDomainType = TodolistType & {\n\tfilter: FilterValuesType;\n\tentityStatus: RequestStatusType;\n};\n\nconst initialState: Array<TodolistDomainType> = [];\n\n\nconst slice = createSlice({\n\tname: 'todolists',\n\tinitialState,\n\treducers: {\n\t\tsetTodolists(state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\n\t\t\treturn action.payload.todolists.map((tl) => ({\n\t\t\t\t...tl,\n\t\t\t\tfilter: 'all',\n\t\t\t\tentityStatus: 'idle',\n\t\t\t}));\n\t\t},\n\t\tremoveTodolist(state, action: PayloadAction<{ todolistId: string }>) {\n\t\t\tconst index = state.findIndex(tl => tl.id === action.payload.todolistId);\n\t\t\tif (index > -1) {\n\t\t\t\tstate.splice(index, 1);\n\t\t\t}\n\t\t},\n\t\taddTodolist(state, action: PayloadAction<{ todolist: TodolistType }>) {\n\t\t\tstate.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'});\n\t\t},\n\t\tchangeTodolistTitle(state, action: PayloadAction<{ todolistId: string, title: string }>) {\n\t\t\tconst index = state.findIndex(tl => tl.id === action.payload.todolistId);\n\t\t\tif (index > -1) {\n\t\t\t\tstate[index].title = action.payload.title;\n\t\t\t}\n\t\t},\n\t\tchangeTodolistFilter(state, action: PayloadAction<{ todolistId: string, filter: FilterValuesType }>) {\n\t\t\tconst index = state.findIndex(tl => tl.id === action.payload.todolistId);\n\t\t\tif (index > -1) {\n\t\t\t\tstate[index].filter = action.payload.filter;\n\t\t\t}\n\t\t},\n\t\tchangeTodolistEntityStatus(state, action: PayloadAction<{ todolistId: string, entityStatus: RequestStatusType }>) {\n\t\t\tconst index = state.findIndex(tl => tl.id === action.payload.todolistId);\n\t\t\tif (index > -1) {\n\t\t\t\tstate[index].entityStatus = action.payload.entityStatus;\n\t\t\t}\n\t\t},\n\t\tclearTodosData(state, action: PayloadAction<{}>) {\n\t\t\treturn [];\n\t\t}\n\t}\n});\n\nexport const todolistsReducer = slice.reducer;\nexport const {\n\tclearTodosData, changeTodolistEntityStatus, changeTodolistFilter,\n\tchangeTodolistTitle, addTodolist, removeTodolist, setTodolists\n} = slice.actions;\n\n// Thunks\n\nexport const fetchTodolistsTC = (): ThunkType => async (dispatch) => {\n\tdispatch(setAppStatus({status: 'loading'}));\n\ttry {\n\t\tconst res = await todolistApi.getTodolists();\n\t\tdispatch(setTodolists({todolists: res.data}));\n\t\ttry {\n\t\t\tres.data.forEach((tl) => {\n\t\t\t\tdispatch(fetchTasksTC(tl.id));\n\t\t\t\tdispatch(setAppStatus({status: 'succeeded'}));\n\t\t\t});\n\t\t} catch (e) {\n\t\t\thandlerServerNetworkError(e as Error, dispatch);\n\t\t}\n\t} catch (e) {\n\t\thandlerServerNetworkError(e as Error, dispatch);\n\t}\n};\n\nexport const removeTodolistTC =\n\t(todolistId: string): ThunkType =>\n\t\tasync (dispatch) => {\n\t\t\tdispatch(setAppStatus({status: 'loading'}));\n\t\t\tdispatch(changeTodolistEntityStatus({todolistId, entityStatus: 'loading'}));\n\t\t\ttry {\n\t\t\t\tconst res = await todolistApi.removeTodolist(todolistId);\n\t\t\t\tif (res.data.resultCode === 0) {\n\t\t\t\t\tdispatch(removeTodolist({todolistId}));\n\t\t\t\t\tdispatch(setAppStatus({status: 'succeeded'}));\n\t\t\t\t} else {\n\t\t\t\t\thandleServerAppError(res.data, dispatch);\n\t\t\t\t\tdispatch(changeTodolistEntityStatus({todolistId, entityStatus: 'failed'}));\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\thandlerServerNetworkError(e as Error, dispatch);\n\t\t\t\tdispatch(changeTodolistEntityStatus({todolistId, entityStatus: 'failed'}));\n\t\t\t}\n\t\t};\n\nexport const addTodolistTC =\n\t(title: string): ThunkType =>\n\t\tasync (dispatch) => {\n\t\t\tdispatch(setAppStatus({status: 'loading'}));\n\t\t\ttry {\n\t\t\t\tconst res = await todolistApi.addTodolist(title);\n\t\t\t\tif (res.data.resultCode === 0) {\n\t\t\t\t\tdispatch(addTodolist({todolist: res.data.data.item}));\n\t\t\t\t\tdispatch(setAppStatus({status: 'succeeded'}));\n\t\t\t\t} else {\n\t\t\t\t\thandleServerAppError(res.data, dispatch);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\thandlerServerNetworkError(e as Error, dispatch);\n\t\t\t}\n\t\t};\n\nexport const changeTodolistTitleTC =\n\t(todolistId: string, title: string): ThunkType =>\n\t\tasync (dispatch) => {\n\t\t\tdispatch(setAppStatus({status: 'loading'}));\n\t\t\ttry {\n\t\t\t\tconst res = await todolistApi.changeTodolistTitle(todolistId, title);\n\t\t\t\tif (res.data.resultCode === 0) {\n\t\t\t\t\tdispatch(changeTodolistTitle({todolistId, title}));\n\t\t\t\t\tdispatch(setAppStatus({status: 'succeeded'}));\n\t\t\t\t} else {\n\t\t\t\t\thandleServerAppError(res.data, dispatch);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\thandlerServerNetworkError(e as Error, dispatch);\n\t\t\t}\n\t\t};\n\n\n\n\n","import React, {\n\tChangeEvent,\n\tKeyboardEvent,\n\tuseCallback,\n\tuseState,\n} from 'react';\nimport { IconButton, TextField } from '@mui/material';\nimport { ControlPoint } from '@mui/icons-material';\n\nexport type AddItemFormType = {\n\tcallBack: (title: string) => void;\n\tdisabled?: boolean;\n};\n\nexport const AddItemForm = React.memo(\n\t({ disabled = false, callBack }: AddItemFormType) => {\n\t\tconst [title, setTitle] = useState('');\n\t\tconst [error, setError] = useState<boolean>(false);\n\t\tconst onClickAddHandler = useCallback(() => {\n\t\t\tif (title.trim()) {\n\t\t\t\tcallBack(title.trim());\n\t\t\t\tsetTitle('');\n\t\t\t} else {\n\t\t\t\tsetError(true);\n\t\t\t}\n\t\t}, [title, callBack]);\n\t\tconst onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n\t\t\tsetError(false);\n\t\t\tsetTitle(e.currentTarget.value);\n\t\t};\n\t\tconst onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n\t\t\tif (e.key === 'Enter') {\n\t\t\t\tonClickAddHandler();\n\t\t\t}\n\t\t};\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<TextField\n\t\t\t\t\tvalue={title}\n\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\tonChange={onChangeHandler}\n\t\t\t\t\tonKeyPress={onKeyPressHandler}\n\t\t\t\t\terror={error}\n\t\t\t\t\tvariant={'outlined'}\n\t\t\t\t\tlabel={error ? 'Incorrect title' : 'Type title'}\n\t\t\t\t/>\n\t\t\t\t<IconButton\n\t\t\t\t\tonClick={onClickAddHandler}\n\t\t\t\t\tcolor={'primary'}\n\t\t\t\t\tdisabled={disabled}\n\t\t\t\t>\n\t\t\t\t\t<ControlPoint />\n\t\t\t\t</IconButton>\n\t\t\t</div>\n\t\t);\n\t}\n);\n","import { TextField } from '@mui/material';\nimport React, {\n\tChangeEvent,\n\tKeyboardEvent,\n\tuseCallback,\n\tuseState,\n} from 'react';\n\ntype EditableSpanType = {\n\ttitle: string;\n\tcallBack: (title: string) => void;\n\tdisabled?: boolean;\n};\nexport const EditableSpan = React.memo(\n\t({ title, disabled = false, callBack }: EditableSpanType) => {\n\t\tconst [edit, setEdit] = useState<boolean>(false);\n\t\tconst [newTitle, setNewTitle] = useState(title);\n\t\tconst onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n\t\t\tsetNewTitle(e.currentTarget.value);\n\t\t};\n\t\tconst editTrue = () => {\n\t\t\tif (!disabled) {\n\t\t\t\tsetEdit(true);\n\t\t\t}\n\t\t};\n\t\tconst editFalse = useCallback(() => {\n\t\t\tsetEdit(false);\n\t\t\tcallBack(newTitle);\n\t\t}, [callBack, newTitle]);\n\t\tconst onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n\t\t\tif (e.key === 'Enter') {\n\t\t\t\teditFalse();\n\t\t\t}\n\t\t};\n\t\tconst handleFocus = (event: React.FocusEvent<HTMLInputElement>) =>\n\t\t\tevent.currentTarget.select();\n\t\treturn edit ? (\n\t\t\t<TextField\n\t\t\t\tdisabled={disabled}\n\t\t\t\tonFocus={handleFocus}\n\t\t\t\tvariant={'standard'}\n\t\t\t\tvalue={newTitle}\n\t\t\t\tonKeyPress={onKeyPressHandler}\n\t\t\t\tonChange={onChangeHandler}\n\t\t\t\tonBlur={editFalse}\n\t\t\t\tautoFocus\n\t\t\t/>\n\t\t) : (\n\t\t\t<span onDoubleClick={editTrue}>{title}</span>\n\t\t);\n\t}\n);\n","import React, { ChangeEvent, useCallback } from 'react';\nimport { Checkbox, IconButton } from '@mui/material';\nimport { EditableSpan } from '../../../../components/EditableSpan/EditableSpan';\nimport { Delete } from '@mui/icons-material';\nimport { TaskStatuses, TaskType } from '../../../../api/todolist-api';\nimport { changeTaskTC } from '../../tasks-reducer';\nimport { useDispatch } from 'react-redux';\nimport { RequestStatusType } from '../../../../app/app-reducer';\n\ntype TaskPropsType = {\n\ttask: TaskType;\n\ttodolistId: string;\n\tupdateTask: (taskID: string, title: string) => void;\n\tremoveTask: (taskID: string) => void;\n\ttaskEntityStatus: RequestStatusType;\n};\n\nexport const Task = React.memo(\n\t({\n\t\ttaskEntityStatus,\n\t\ttask,\n\t\tupdateTask,\n\t\tremoveTask,\n\t\ttodolistId,\n\t}: TaskPropsType) => {\n\t\tconst dispatch = useDispatch();\n\n\t\tconst onChangeHandler = useCallback(\n\t\t\t(e: ChangeEvent<HTMLInputElement>) => {\n\t\t\t\tconst newIsDoneValue = e.currentTarget.checked;\n\t\t\t\tdispatch(\n\t\t\t\t\tchangeTaskTC(\n\t\t\t\t\t\ttask.id,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstatus: newIsDoneValue\n\t\t\t\t\t\t\t\t? TaskStatuses.Completed\n\t\t\t\t\t\t\t\t: TaskStatuses.New,\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttodolistId\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t},\n\t\t\t[dispatch, todolistId, task.id]\n\t\t);\n\n\t\treturn (\n\t\t\t<li\n\t\t\t\tclassName={\n\t\t\t\t\ttask.status === TaskStatuses.Completed ? 'is-done' : ''\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t<Checkbox\n\t\t\t\t\tdisabled={taskEntityStatus === 'loading'}\n\t\t\t\t\tonChange={onChangeHandler}\n\t\t\t\t\tchecked={task.status === TaskStatuses.Completed}\n\t\t\t\t/>\n\t\t\t\t<EditableSpan\n\t\t\t\t\ttitle={task.title}\n\t\t\t\t\tcallBack={(title: string) => updateTask(task.id, title)}\n\t\t\t\t\tdisabled={taskEntityStatus === 'loading'}\n\t\t\t\t/>\n\n\t\t\t\t<IconButton\n\t\t\t\t\tonClick={() => removeTask(task.id)}\n\t\t\t\t\tdisabled={taskEntityStatus === 'loading'}\n\t\t\t\t>\n\t\t\t\t\t<Delete />\n\t\t\t\t</IconButton>\n\t\t\t</li>\n\t\t);\n\t}\n);\n","import React, {useCallback} from 'react';\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm';\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan';\nimport {Button, IconButton} from '@mui/material';\nimport {Delete} from '@mui/icons-material';\nimport {Task} from './Task/Task';\nimport {changeTodolistFilter, changeTodolistTitleTC, removeTodolistTC, FilterValuesType} from '../todolists-reducer';\nimport {TaskStatuses} from '../../../api/todolist-api';\nimport {useDispatch} from 'react-redux';\nimport {addTaskTC, changeTaskTC, removeTaskTC, TaskDomainType} from '../tasks-reducer';\nimport {RequestStatusType} from '../../../app/app-reducer';\n\ntype PropsType = {\n\ttodolistId: string;\n\ttitle: string;\n\ttasks: Array<TaskDomainType>;\n\tfilter: FilterValuesType;\n\tentityStatus: RequestStatusType;\n};\n\nexport const Todolist = React.memo(({entityStatus, todolistId, ...props}: PropsType) => {\n\tconst dispatch = useDispatch();\n\n\tconst removeTodolistHandler = useCallback(() => {\n\t\tdispatch(removeTodolistTC(todolistId));\n\t}, [dispatch, todolistId]);\n\n\tconst changeFilter = useCallback(\n\t\t(filter: FilterValuesType) => {\n\t\t\tdispatch(changeTodolistFilter({todolistId, filter}));\n\t\t},\n\t\t[dispatch, todolistId]\n\t);\n\n\tconst removeTaskHandler = useCallback(\n\t\t(taskId: string) => {\n\t\t\tdispatch(removeTaskTC(todolistId, taskId));\n\t\t},\n\t\t[dispatch, todolistId]\n\t);\n\n\tconst addTaskHandler = useCallback(\n\t\t(title: string) => {\n\t\t\tdispatch(addTaskTC(todolistId, title));\n\t\t},\n\t\t[dispatch, todolistId]\n\t);\n\n\tconst updateTaskHandler = useCallback(\n\t\t(taskID: string, title: string) => {\n\t\t\tdispatch(changeTaskTC(taskID, {title}, todolistId));\n\t\t},\n\t\t[dispatch, todolistId]\n\t);\n\n\tconst changeTodolistTitle = useCallback(\n\t\t(title: string) => {\n\t\t\tdispatch(changeTodolistTitleTC(todolistId, title));\n\t\t},\n\t\t[dispatch, todolistId]\n\t);\n\n\tlet tasksForTodolist = props.tasks;\n\tif (props.filter === 'active') {\n\t\ttasksForTodolist = props.tasks.filter((t) => t.status === TaskStatuses.New);\n\t}\n\tif (props.filter === 'completed') {\n\t\ttasksForTodolist = props.tasks.filter((t) => t.status === TaskStatuses.Completed);\n\t}\n\n\treturn (\n\t\t<div className='Todolist'>\n\t\t\t<h3>\n\t\t\t\t<EditableSpan\n\t\t\t\t\ttitle={props.title}\n\t\t\t\t\tcallBack={changeTodolistTitle}\n\t\t\t\t\tdisabled={entityStatus === 'loading'}\n\t\t\t\t/>\n\t\t\t\t<IconButton onClick={removeTodolistHandler} disabled={entityStatus === 'loading'}>\n\t\t\t\t\t<Delete/>\n\t\t\t\t</IconButton>\n\t\t\t</h3>\n\t\t\t<AddItemForm callBack={addTaskHandler} disabled={entityStatus === 'loading'}/>\n\t\t\t<div>\n\t\t\t\t<ul>\n\t\t\t\t\t{tasksForTodolist.map((t) => (\n\t\t\t\t\t\t<Task\n\t\t\t\t\t\t\tkey={t.id}\n\t\t\t\t\t\t\ttask={t}\n\t\t\t\t\t\t\ttodolistId={todolistId}\n\t\t\t\t\t\t\tremoveTask={removeTaskHandler}\n\t\t\t\t\t\t\tupdateTask={updateTaskHandler}\n\t\t\t\t\t\t\ttaskEntityStatus={t.taskEntityStatus}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<Button variant={props.filter === 'all' ? 'contained' : 'text'} onClick={() => changeFilter('all')}>\n\t\t\t\t\tAll\n\t\t\t\t</Button>\n\t\t\t\t<Button\n\t\t\t\t\tvariant={props.filter === 'active' ? 'contained' : 'text'}\n\t\t\t\t\tonClick={() => changeFilter('active')}\n\t\t\t\t>\n\t\t\t\t\tActive\n\t\t\t\t</Button>\n\t\t\t\t<Button\n\t\t\t\t\tvariant={props.filter === 'completed' ? 'contained' : 'text'}\n\t\t\t\t\tonClick={() => changeFilter('completed')}\n\t\t\t\t>\n\t\t\t\t\tCompleted\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t</div>\n\t);\n});\n","import React, { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootStateType } from '../../app/store';\nimport {\n\taddTodolistTC,\n\tfetchTodolistsTC,\n\tTodolistDomainType,\n} from './todolists-reducer';\nimport { TasksStateType } from './tasks-reducer';\nimport { Grid, Paper } from '@mui/material';\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm';\nimport { Todolist } from './Todolist/Todolist';\nimport { Navigate } from 'react-router-dom';\n\ntype TodosListType = {\n\tdemo?: boolean;\n};\n\nexport const TodolistsList = React.memo(({ demo = false }: TodosListType) => {\n\tconst dispatch = useDispatch();\n\tconst todolists = useSelector<RootStateType, Array<TodolistDomainType>>(\n\t\t(state) => state.todolists\n\t);\n\tconst tasks = useSelector<RootStateType, TasksStateType>(\n\t\t(state) => state.tasks\n\t);\n\tconst isLoggedIn = useSelector<RootStateType, boolean>(\n\t\t(state) => state.auth.isLoggedIn\n\t);\n\n\tuseEffect(() => {\n\t\tif (!isLoggedIn) {\n\t\t\treturn;\n\t\t}\n\t\tif (!demo) { dispatch(fetchTodolistsTC()); }\n\t}, [dispatch, demo, isLoggedIn]);\n\n\tconst addTodolistHandler = useCallback(\n\t\t(title: string) => {\n\t\t\tdispatch(addTodolistTC(title));\n\t\t},\n\t\t[dispatch]\n\t);\n\tif (!isLoggedIn) {\n\t\treturn <Navigate to={'/login'} />;\n\t}\n\treturn (\n\t\t<>\n\t\t\t<Grid container style={{ padding: '20px 0' }}>\n\t\t\t\t<AddItemForm callBack={addTodolistHandler} />\n\t\t\t</Grid>\n\t\t\t<Grid container spacing={3}>\n\t\t\t\t{todolists.map((tl) => {\n\t\t\t\t\tconst tasksForTodolist = tasks[tl.id];\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Grid item key={tl.id}>\n\t\t\t\t\t\t\t<Paper style={{ padding: '10px' }}>\n\t\t\t\t\t\t\t\t<Todolist\n\t\t\t\t\t\t\t\t\tkey={tl.id}\n\t\t\t\t\t\t\t\t\ttodolistId={tl.id}\n\t\t\t\t\t\t\t\t\ttitle={tl.title}\n\t\t\t\t\t\t\t\t\ttasks={tasksForTodolist}\n\t\t\t\t\t\t\t\t\tfilter={tl.filter}\n\t\t\t\t\t\t\t\t\tentityStatus={tl.entityStatus}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</Paper>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</Grid>\n\t\t</>\n\t);\n});\n","import * as React from 'react';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\nimport { AppErrorType, setAppError } from '../../app/app-reducer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootStateType } from '../../app/store';\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function (\n\tprops,\n\tref\n) {\n\treturn <MuiAlert elevation={6} ref={ref} variant='filled' {...props} />;\n});\n\nexport function ErrorSnackbar() {\n\tconst dispatch = useDispatch();\n\tconst error = useSelector<RootStateType, AppErrorType>(\n\t\t(state) => state.app.error\n\t);\n\tconst isOpen = error !== null;\n\n\tconst handleClose = (\n\t\tevent?: React.SyntheticEvent | Event,\n\t\treason?: string\n\t) => {\n\t\tif (reason === 'clickaway') {\n\t\t\treturn;\n\t\t}\n\t\tdispatch(setAppError({error: null}));\n\t};\n\n\treturn (\n\t\t<Snackbar\n\t\t\topen={isOpen}\n\t\t\tautoHideDuration={6000}\n\t\t\tonClose={handleClose}\n\t\t\tanchorOrigin={{ horizontal: 'center', vertical: 'bottom' }}\n\t\t>\n\t\t\t<Alert\n\t\t\t\tonClose={handleClose}\n\t\t\t\tseverity='error'\n\t\t\t\tsx={{ width: '100%' }}\n\t\t\t>\n\t\t\t\t{error}\n\t\t\t</Alert>\n\t\t</Snackbar>\n\t);\n}\n","import Grid from '@mui/material/Grid';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormLabel from '@mui/material/FormLabel';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport {useFormik} from 'formik';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {loginTC} from './auth-reducer';\nimport {RootStateType} from '../../app/store';\nimport {Navigate} from 'react-router-dom';\nimport {LoginPramsType} from '../../api/auth-api';\n\nexport const Login = () => {\n\tconst isLoggedIn = useSelector<RootStateType, boolean>(\n\t\t(state) => state.auth.isLoggedIn\n\t);\n\tconst dispatch = useDispatch();\n\tconst formik = useFormik({\n\t\tinitialValues: {\n\t\t\temail: '',\n\t\t\tpassword: '',\n\t\t\trememberMe: false,\n\t\t},\n\t\tvalidate: (values) => {\n\t\t\tconst errors: Partial<Omit<LoginPramsType, 'captcha'>> = {};\n\t\t\tif (!values.email) {\n\t\t\t\terrors.email = 'Required';\n\t\t\t} else if (\n\t\t\t\t!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n\t\t\t) {\n\t\t\t\terrors.email = 'Invalid email address';\n\t\t\t}\n\t\t\tif (!values.password) {\n\t\t\t\terrors.password = 'Required';\n\t\t\t} else if (values.password.length < 3) {\n\t\t\t\terrors.password = 'Must be more than two characters';\n\t\t\t}\n\t\t\treturn errors;\n\t\t},\n\t\tonSubmit: (values) => {\n\t\t\tdispatch(loginTC(values));\n\t\t\tformik.resetForm();\n\t\t},\n\t});\n\n\tif (isLoggedIn) {\n\t\treturn <Navigate to={'/'}/>;\n\t}\n\treturn (\n\t\t<Grid container justifyContent={'center'}>\n\t\t\t<Grid item justifyContent={'center'}>\n\t\t\t\t<form onSubmit={formik.handleSubmit}>\n\t\t\t\t\t<FormControl>\n\t\t\t\t\t\t<FormLabel>\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\tTo log in get registered\n\t\t\t\t\t\t\t\t<a href={'https://social-network.samuraijs.com/'} target={'_blank'}>\n\t\t\t\t\t\t\t\t\t{' '} here\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<p>or use common test account credentials:</p>\n\t\t\t\t\t\t\t<p>Email: free@samuraijs.com</p>\n\t\t\t\t\t\t\t<p>Password: free</p>\n\t\t\t\t\t\t</FormLabel>\n\t\t\t\t\t\t<FormGroup>\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\tlabel='Email'\n\t\t\t\t\t\t\t\tmargin='normal'\n\t\t\t\t\t\t\t\ttype='email'\n\t\t\t\t\t\t\t\t{...formik.getFieldProps('email')}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{formik.touched.email && formik.errors.email && (\n\t\t\t\t\t\t\t\t<div style={{color: 'red'}}>\n\t\t\t\t\t\t\t\t\t{formik.errors.email}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\ttype='password'\n\t\t\t\t\t\t\t\tlabel='Password'\n\t\t\t\t\t\t\t\tmargin='normal'\n\t\t\t\t\t\t\t\t{...formik.getFieldProps('password')}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{formik.touched.password &&\n\t\t\t\t\t\t\tformik.errors.password && (\n\t\t\t\t\t\t\t\t<div style={{color: 'red'}}>\n\t\t\t\t\t\t\t\t\t{formik.errors.password}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\t\t\tlabel={'Remember me'}\n\t\t\t\t\t\t\t\tcontrol={\n\t\t\t\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\t\t\t\t{...formik.getFieldProps('rememberMe')}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\ttype={'submit'}\n\t\t\t\t\t\t\t\tvariant={'contained'}\n\t\t\t\t\t\t\t\tcolor={'primary'}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tLogin\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t</FormControl>\n\t\t\t\t</form>\n\t\t\t</Grid>\n\t\t</Grid>\n\t);\n};\n","import React, { useEffect } from 'react';\nimport './App.css';\nimport { Menu } from '@mui/icons-material';\nimport { TodolistsList } from '../features/TodolistsList/TodolistsList';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootStateType } from './store';\nimport { RequestStatusType, initializeAppTC } from './app-reducer';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Toolbar from '@mui/material/Toolbar';\nimport AppBar from '@mui/material/AppBar';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\nimport Container from '@mui/material/Container';\nimport { ErrorSnackbar } from '../components/ErrorSnackbar/ErrorSnackbar';\nimport { Login } from '../features/Login/Login';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { logoutTC } from '../features/Login/auth-reducer';\n\ntype AppPropsType = {\n\tdemo?: boolean;\n};\n\nexport const App = React.memo(({ demo = false }: AppPropsType) => {\n\tconst appStatus = useSelector<RootStateType, RequestStatusType>(\n\t\t(state) => state.app.status\n\t);\n\tconst isInitialized = useSelector<RootStateType, boolean>(\n\t\t(state) => state.app.isInitialized\n\t);\n\tconst isLoggedIn = useSelector<RootStateType, boolean>(\n\t\t(state) => state.auth.isLoggedIn\n\t);\n\tconst dispatch = useDispatch();\n\tuseEffect(() => {\n\t\tdispatch(initializeAppTC());\n\t}, [dispatch]);\n\n\tconst logoutHandler = () => {\n\t\tdispatch(logoutTC());\n\t};\n\n\tif (!isInitialized) {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'fixed',\n\t\t\t\t\ttop: '30%',\n\t\t\t\t\ttextAlign: 'center',\n\t\t\t\t\twidth: '100%',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<CircularProgress />\n\t\t\t</div>\n\t\t);\n\t}\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<ErrorSnackbar />\n\t\t\t<AppBar position='static'>\n\t\t\t\t<Toolbar>\n\t\t\t\t\t<IconButton\n\t\t\t\t\t\tsize='large'\n\t\t\t\t\t\tedge='start'\n\t\t\t\t\t\tcolor='inherit'\n\t\t\t\t\t\taria-label='menu'\n\t\t\t\t\t\tsx={{ mr: 2 }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Menu />\n\t\t\t\t\t</IconButton>\n\t\t\t\t\t<Typography\n\t\t\t\t\t\tvariant='h6'\n\t\t\t\t\t\tcomponent='div'\n\t\t\t\t\t\tsx={{ flexGrow: 1 }}\n\t\t\t\t\t>\n\t\t\t\t\t\tTO DO LIST\n\t\t\t\t\t</Typography>\n\t\t\t\t\t{isLoggedIn && (\n\t\t\t\t\t\t<Button color='inherit' onClick={logoutHandler}>\n\t\t\t\t\t\t\tLog out\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t)}\n\t\t\t\t</Toolbar>\n\t\t\t</AppBar>\n\t\t\t<div style={{ width: '100%', height: '5px' }}>\n\t\t\t\t{appStatus === 'loading' && <LinearProgress />}\n\t\t\t</div>\n\t\t\t<Container fixed>\n\t\t\t\t<Routes>\n\t\t\t\t\t<Route path={'/'} element={<TodolistsList demo={demo} />} />\n\t\t\t\t\t<Route\n\t\t\t\t\t\tpath={'/to-do-list'}\n\t\t\t\t\t\telement={<TodolistsList demo={demo} />}\n\t\t\t\t\t/>\n\t\t\t\t\t<Route path={'/login'} element={<Login />} />\n\t\t\t\t\t<Route\n\t\t\t\t\t\tpath={'/404'}\n\t\t\t\t\t\telement={\n\t\t\t\t\t\t\t<h1 style={{ textAlign: 'center' }}>\n\t\t\t\t\t\t\t\t404: PAGE NOT FOUND\n\t\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t\t<Route path={'*'} element={<Navigate to={'/404'} />} />\n\t\t\t\t</Routes>\n\t\t\t</Container>\n\t\t</div>\n\t);\n});\n","import {combineReducers} from 'redux';\nimport {\n\ttasksReducer,\n} from '../features/TodolistsList/tasks-reducer';\nimport {\n\ttodolistsReducer,\n} from '../features/TodolistsList/todolists-reducer';\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk';\nimport {appReducer} from './app-reducer';\nimport {authReducer} from '../features/Login/auth-reducer';\nimport {configureStore} from '@reduxjs/toolkit';\n\nconst rootReducer = combineReducers({\n\ttodolists: todolistsReducer,\n\ttasks: tasksReducer,\n\tapp: appReducer,\n\tauth: authReducer,\n});\n\nexport type RootStateType = ReturnType<typeof rootReducer>;\n\nexport const store = configureStore({\n\treducer: rootReducer,\n\tmiddleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\n});\n\nexport type ThunkType = ThunkAction<void, RootStateType, unknown, any>;\n\n// @ts-ignore\nwindow.store = store;\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { App } from './app/App';\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n\t<HashRouter>\n\t\t<Provider store={store}>\n\t\t\t<App />\n\t\t</Provider>\n\t</HashRouter>,\n\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}